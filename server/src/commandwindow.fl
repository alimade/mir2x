# data file for the Fltk User Interface Designer (fluid)
version 1.0308
header_name {.hpp}
code_name {.cpp}
decl {\#include <memory>} {public global
}

decl {\#include "totype.hpp"} {public global
}

decl {\#include "filesys.hpp"} {public global
}

decl {\#include "commandinput.hpp"} {public global
}

decl {\#include "commandluamodule.hpp"} {public global
}

class CommandWindow {} {
  decl {int m_CWID;} {private local
  }
  decl {std::unique_ptr<CommandLuaModule> m_luaModule;} {private local
  }
  Function {CommandWindow()} {} {
    Fl_Window m_window {
      label LuaCommand
      callback {// when get esc
// 1. hide current window
// 2. activate its menuitem in main window
// won't do any destruction inside callback, do it by ``exit()" in lua
{
    hideAll();

    extern MainWindow *g_mainWindow;
    g_mainWindow->HideCommandWindow(getCWID());
}}
      xywh {71 119 580 400} type Double resizable
      code0 {\#include "mainwindow.hpp"} visible
    } {
      Fl_Menu_Bar {} {
        xywh {0 0 580 25} box FLAT_BOX
      } {
        Submenu {} {
          label Configure
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label Clear
            callback {m_browser->clear();}
            xywh {0 0 100 20}
          }
          Submenu {} {
            label {Run Mode    }
            xywh {0 0 100 20}
          } {
            MenuItem m_runModeAuto {
              label Auto
              callback {{
    m_runModeLabel->label("AUTO");
    m_window->redraw();
}}
              xywh {5 5 100 20} type Radio value 1
            }
            MenuItem m_runModeLocal {
              label Local
              callback {{
    m_runModeLabel->label("LOCAL");
    m_window->redraw();
}}
              xywh {15 15 100 20} type Radio
            }
            MenuItem m_runModeAsync {
              label {Async   }
              callback {{
    m_runModeLabel->label("ASYNC");
    m_window->redraw();
}}
              xywh {25 25 100 20} type Radio
            }
          }
        }
      }
      Fl_Input m_input {
        xywh {55 375 525 25} labeltype NO_LABEL textfont 4 resizable
        class CommandInput
      }
      Fl_Browser m_browser {
        callback {// callback for browser
// when getting double-clicks, it insert current entry to the input box
{
    // check if we get double-clicks
    if(Fl::event_clicks()){
        if(auto pText = m_browser->text(m_browser->value())){
            std::string szCommandStr = m_input->value();
            if(szCommandStr.empty()){
                // to skip the formatting string at the beginning
                // current I am using:
                //   @C4 : normal
                //   @C9 : warning
                //   @C1 : error
                m_input->value(pText + 3);
            }
        }
    }

}}
        xywh {0 25 580 350} type Hold textfont 4
      }
      Fl_Box m_runModeLabel {
        label AUTO
        xywh {0 375 55 25} align 80
      }
    }
    code {{
    // initialization of the lua module
    m_CWID = 0;

	// bind current window to CommandInput
	// which helps to do event logic handling inside CommandInput
	// avoid to do it in CommandWindow::handle(int)
	m_input->bind(this);
}} {}
  }
  Function {hideAll()} {return_type void
  } {
    code {{
	m_window->hide();
}} {}
  }
  Function {showAll()} {return_type void
  } {
    code {{
	m_window->show();
}} {}
  }
  Function {redrawAll()} {return_type void
  } {
    code {{
	m_window->redraw();
}} {}
  }
  Function {getLuaModule()} {return_type {CommandLuaModule *}
  } {
    code {{
	// won't put any cv-qualifiers
	// expose the TaskHub interface to outside
	// then I don't have do implement CommandWindow::Execute(const char *)
	return m_luaModule.get();
}} {}
  }
  Function {detachLuaModule()} {return_type void
  } {
    code {{
    m_luaModule.reset();
}} {}
  }
  Function {bindLuaModule(int cwid)} {return_type void
  } {
    code {{
    // activate the internal LuaModule and its TaskHub
    // after this line the LuaModule grants a CWID to print
    // and LuaModuleTaskHub has an LuaModule as command input
    {
        if(cwid > 0){
            m_CWID = cwid;
            m_luaModule = std::make_unique<CommandLuaModule>(to_u32(cwid));
        }
    }
}} {}
  }
  Function {addLog(int logType, const char *prompt, const char *logInfo)} {return_type void
  } {
    code {{
    // log can be multiply lines but only do one line for this call
    // don't put multi-thread handling code here

    if(m_browser->size() > 5000){
        m_browser->remove(1);
    }

    const char *colorCodeCPtr = nullptr;
    switch(logType){
        case 0  : colorCodeCPtr = "@C4"; break;
        case 1  : colorCodeCPtr = "@C9"; break;
        default : colorCodeCPtr = "@C1"; break;
    }

    m_browser->add(((std::string(colorCodeCPtr) + (prompt ? prompt : "")) + (logInfo ? logInfo : "")).c_str());
    m_browser->bottomline(m_browser->size());
}} {}
  }
  Function {clearBrowser()} {return_type void
  } {
    code {{
    // clear all history of current browser
    m_browser->clear();
}} {}
  }
  Function {getCWID()} {return_type int
  } {
    code {{
    return m_CWID;
}} {}
  }
  Function {getHistory() const} {return_type {const std::vector<std::string> &}
  } {
    code {{
    return m_input->getHistory();
}} {}
  }
  Function {setGUIFont(int fontID)} {return_type void
  } {
    code {{
    m_input->textfont((Fl_Font)(fontID));
    m_browser->textfont((Fl_Font)(fontID));
    m_window->redraw();
}} {}
  }
  Function {runScriptFile(const char *fileName)} {return_type void
  } {
    code {{
    if(!filesys::hasFile(fileName)){
    	fl_alert("Invalid file name: %s", fileName);
        return;
    }

    if(!m_luaModule){
        fl_alert("Command window %d has no lua module bound", m_CWID);
        return;
    }

    if(!m_input->active()){
        fl_alert("Command window %d is busy", m_CWID);
    }

    m_input->postExecLuaString(filesys::readFile(fileName));
}} {}
  }
  Function {getEvalMode()} {return_type {std::string}
  } {
    code {{
    if(m_runModeAuto ->value()) return "AUTO";
    if(m_runModeLocal->value()) return "LOCAL";
    if(m_runModeAsync->value()) return "ASYNC";

    throw fflerror("invalid eval mode");
}} {}
  }
}
