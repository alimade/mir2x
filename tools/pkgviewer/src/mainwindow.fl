# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.hpp}
code_name {.cpp}
decl {\#include <string>} {public global
}

decl {\#include <cmath>} {private local
}

decl {\#include <cstdint>} {private local
}

decl {\#include <cstring>} {private local
}

decl {\#include <iostream>} {private local
}

decl {\#include "imgf.hpp"} {private local
}

decl {\#include "colorf.hpp"} {private local
}

decl {\#include "alphaf.hpp"} {private local
}

decl {\#include "strf.hpp"} {private local
}

decl {\#include "wilimagepackage.hpp"} {private local
}

class MainWindow {} {
  Function {MainWindow()} {} {
    Fl_Window m_window {
      label pkgviewer
      callback {{
	// don't exit directly
	// exit(0);
}}
      private xywh {42 70 555 605} type Double labelfont 4 resizable
      code0 {\#include <FL/fl_ask.H>} visible
    } {
      Fl_Menu_Bar m_menuBar {
        label {Auto alpha}
        private xywh {0 0 600 20} box FLAT_BOX labelfont 4 textfont 4
      } {
        Submenu {} {
          label File
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem {} {
            label Open
            callback {{
    extern PreviewWindow *g_previewWindow;
    g_previewWindow->hide();

    Fl_Native_File_Chooser fileChooser;
    extern std::string g_fileFullName;
    fileChooser.title("Select .WIL File");
    fileChooser.type(Fl_Native_File_Chooser::BROWSE_FILE);

    char matchedFileNames[] =
        "WIL\\t*.wil\\n"
        ;

    fileChooser.filter(matchedFileNames);
    fileChooser.directory(".");
    switch(fileChooser.show()){
        case -1:
            {
                fl_alert("%s", fileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
            	DeactivateAll();
                // TODO: NO ERROR CHECKING HERE
                g_fileFullName = fileChooser.filename();
                std::replace(g_fileFullName.begin(), g_fileFullName.end(), '\\\\', '/');

                std::string pathName, fileName, fileExt;
                auto posF = g_fileFullName.find_last_of('/');
                auto posD = g_fileFullName.find_last_of('.');

                pathName = g_fileFullName.substr(0, posF);
                fileName = g_fileFullName.substr(posF + 1, posD - posF - 1);
                fileExt  = g_fileFullName.substr(posD + 1);

                // std::replace(pathName.begin(), pathName.end(), '\\\\', '/');

                // std::cout << pathName << std::endl;
                // std::cout << fileName << std::endl;
                // std::cout << fileExt  << std::endl;

                extern WilImagePackage *g_wilPackage;

                delete g_wilPackage;
                g_wilPackage = new WilImagePackage(pathName.c_str(), fileName.c_str());

                m_browser->clear();
                int  maxLen = 0;
                auto nCnt   = g_wilPackage->indexCount();
                for(auto nTmp = nCnt; nTmp > 0; nTmp /= 10){
                    maxLen++;
                }

                auto fnUpdateProgressBar = [nLastPercent = 0](int nCurrCount) mutable
                {
                    extern WilImagePackage *g_wilPackage;
                    auto nPercent = std::lround(100.0 * nCurrCount / g_wilPackage->indexCount());
                    if(nPercent > nLastPercent){
                        nLastPercent = nPercent;

                        extern ProgressBarWindow *g_progressBarWindow;
                        g_progressBarWindow->SetValue(nPercent);
                        g_progressBarWindow->redrawAll();
                        g_progressBarWindow->showAll();
                        Fl::check();
                    }
                };

                std::string formatStr;
                formatStr = "Index: %0" + std::to_string(maxLen) + "d       W:%4d       H:%4d       PX:%4d      PY:%4d";

                int nImageCount = 0;
                for(int nImgIndex = 0; nImgIndex < to_d(g_wilPackage->indexCount()); ++nImgIndex){
                    fnUpdateProgressBar(nImgIndex);
                    if(g_wilPackage->setIndex(nImgIndex)){
                        char tmpBuf[128];
                        std::sprintf(tmpBuf, formatStr.c_str(),
                                nImgIndex,
                                g_wilPackage->currImageInfo()->width,
                                g_wilPackage->currImageInfo()->height,
                                g_wilPackage->currImageInfo()->px,
                                g_wilPackage->currImageInfo()->py);

                        m_browser->add(tmpBuf, (void *)((intptr_t)nImgIndex));
                        nImageCount++;
                    }
                }

                extern ProgressBarWindow *g_progressBarWindow;
                g_progressBarWindow->hideAll();
                
                ActivateAll();
                auto szBottomInfo = std::string("FileName: ") + fileName + "." + fileExt
                    + "    ImageCount: " + std::to_string(nImageCount)
                    + "    Version: "    + std::to_string(g_wilPackage->version());

                AddBottomLog(szBottomInfo.c_str());
                break;
            }
    }
}}
            xywh {0 0 30 20} shortcut 0x4006f labelfont 4 divider
            code0 {\#include <FL/Fl_Native_File_Chooser.H>}
            code1 {\#include "progressbarwindow.hpp"}
            code2 {\#include "previewwindow.hpp"}
          }
          MenuItem {} {
            label Export
            callback {{
    Fl_Native_File_Chooser fileChooser;
    fileChooser.title("Save");
    fileChooser.type(Fl_Native_File_Chooser::BROWSE_SAVE_DIRECTORY);
    fileChooser.directory(".");
    
    switch(fileChooser.show()){
        case -1:
            {
                fl_alert("%s", fileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                const auto selectedImgIdx = selectedImageIndex();
                std::string filePathName = fileChooser.filename();
                std::replace(filePathName.begin(), filePathName.end(), '\\\\', '/');

                saveImage(selectedImgIdx, filePathName);
                break;
            }
    }
}}
            xywh {0 0 30 20} labelfont 4
            code0 {\#include <cstdint>}
          }
          MenuItem {} {
            label {Export All}
            callback {{
	Fl_Native_File_Chooser fileChooser;
	fileChooser.title("Save All Wil Images");
	fileChooser.type(Fl_Native_File_Chooser::BROWSE_SAVE_DIRECTORY);
	fileChooser.directory(".");
	switch(fileChooser.show()){
		case -1:
            {
                fl_alert("%s", fileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                std::string filePathName = fileChooser.filename();
                std::replace(filePathName.begin(), filePathName.end(), '\\\\', '/');

                extern WilImagePackage *g_wilPackage;
                extern ProgressBarWindow *g_progressBarWindow;

                g_progressBarWindow->SetValue(0);
                g_progressBarWindow->redrawAll();
                g_progressBarWindow->showAll();
                Fl::check();

                int lastPercent = 0;
                std::vector<uint32_t> stvBuf;

                for(int nIndex = 1; nIndex <= m_browser->size(); ++nIndex){
                    const auto currPercent = to_d(std::lround(nIndex * 100.0 / g_wilPackage->indexCount()));
                    if(currPercent != lastPercent){
                        lastPercent = currPercent;
                        g_progressBarWindow->SetValue(currPercent);
                        g_progressBarWindow->redrawAll();
                        g_progressBarWindow->showAll();
                        Fl::check();
                    }


                    const auto imgIdx = to_u32((intptr_t)(m_browser->data(nIndex)));
                    saveImage(imgIdx, filePathName);
                }
                g_progressBarWindow->hideAll();
                break;
            }
    }
}}
            xywh {20 20 30 20} labelfont 4 divider
            code0 {\#include "progressbarwindow.hpp"}
          }
          MenuItem {} {
            label Exit
            callback {exit(0);}
            xywh {0 0 30 20} shortcut 0x40065 labelfont 4
          }
        }
        Submenu {} {
          label Config
          xywh {0 0 70 21} labelfont 4
        } {
          MenuItem m_menuItemShowOffsetCross {
            label {Show Offset Cross       }
            callback {{
	extern PreviewWindow *g_previewWindow;
	g_previewWindow->redraw();
}}
            xywh {70 70 36 21} type Toggle value 1 labelfont 4 divider
            code0 {\#include "previewwindow.hpp"}
          }
          MenuItem m_menuItemShowLayer0 {
            label {Show Layer 0}
            callback {{
	extern PreviewWindow *g_previewWindow;
	g_previewWindow->loadImage();
	g_previewWindow->redraw();
}}
            xywh {60 60 36 21} type Toggle value 1 labelfont 4
            code0 {\#include "previewwindow.hpp"}
          }
          MenuItem m_menuItemShowLayer1 {
            label {Show Layer 1}
            callback {{
	extern PreviewWindow *g_previewWindow;
	g_previewWindow->loadImage();
	g_previewWindow->redraw();
}}
            xywh {40 40 36 21} type Toggle value 1 labelfont 4
            code0 {\#include "previewwindow.hpp"}
          }
          MenuItem m_menuItemShowLayer2 {
            label {Show Layer 2}
            callback {{
	extern PreviewWindow *g_previewWindow;
	g_previewWindow->loadImage();
	g_previewWindow->redraw();
}}
            xywh {20 20 36 21} type Toggle value 1 labelfont 4 divider
            code0 {\#include "previewwindow.hpp"}
          }
          MenuItem m_menuItemSaveIndex {
            label {Save Index}
            xywh {30 30 36 21} type Toggle labelfont 4
          }
          MenuItem m_menuItemSaveLayers {
            label {Save Layers}
            xywh {10 10 36 21} type Toggle labelfont 4
          }
          MenuItem m_menuItemSaveOffset {
            label {Save Offset}
            xywh {20 20 36 21} type Toggle labelfont 4 divider
          }
          MenuItem m_menuItemAutoAlpha {
            label {Auto Alpha}
            callback {{
	extern PreviewWindow *g_previewWindow;
	g_previewWindow->loadImage();
	g_previewWindow->redraw();
}}
            xywh {20 20 36 21} type Toggle labelfont 4
            code0 {\#include "previewwindow.hpp"}
          }
          MenuItem m_menuItemAutoAlphaShadow {
            label {Remove Shadow Mosaic}
            callback {{
	extern PreviewWindow *g_previewWindow;
	g_previewWindow->loadImage();
	g_previewWindow->redraw();
}}
            xywh {30 30 36 21} type Toggle labelfont 4 divider
            code0 {\#include "previewwindow.hpp"}
          }
          MenuItem m_menuItemOffsetDraw {
            label {Offset Draw}
            callback {{
	extern PreviewWindow *g_previewWindow;
	g_previewWindow->redraw();
}}
            xywh {20 20 36 21} type Toggle value 1 labelfont 4 divider
            code0 {\#include "previewwindow.hpp"}
          }
          MenuItem m_menuItemClearBackground {
            label {Clear Background}
            callback {{
	extern PreviewWindow *g_previewWindow;
	g_previewWindow->redraw();
}}
            xywh {30 30 36 21} type Toggle labelfont 4
            code0 {\#include "previewwindow.hpp"}
          }
        }
        Submenu {} {
          label About
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem {} {
            label {About Me       }
            callback {{
	static AboutWindow *p;
	if(!p){
		p = new AboutWindow();
	}
	p->showAll();
}}
            xywh {0 0 30 20} labelfont 4
            code0 {\#include "aboutwindow.hpp"}
          }
        }
      }
      Fl_Browser m_browser {
        callback {// handle the click event
// when clicking the item preview window should show selected window

extern PreviewWindow   *g_previewWindow;
extern MainWindow      *g_mainWindow;
extern WilImagePackage *g_wilPackage;

if(g_wilPackage){
    if(g_wilPackage->setIndex(g_mainWindow->selectedImageIndex())){
        g_previewWindow->loadImage();
        g_previewWindow->show();
        g_previewWindow->redraw();
    }
}}
        private xywh {0 20 555 570} type Hold labelfont 4 textfont 4 resizable
        code0 {\#include <algorithm>}
        code1 {\#include <FL/fl_draw.H>}
        code2 {\#include "previewwindow.hpp"}
      }
      Fl_Box m_logBar {
        xywh {0 590 555 15} labelfont 4 labelsize 10 align 20
      }
    }
    code {{
	// give an initial value of status bar
	AddBottomLog("Version 0.0.1");
}} {}
  }
  Function {showAll()} {return_type void
  } {
    code {{
	m_window->show();
}} {}
  }
  Function {selectedImageIndex()} {return_type uint32_t
  } {
    code {{
	for(int i = 1; i <= m_browser->size(); ++i)
	{
		if(m_browser->selected(i)){
			return to_u32((intptr_t)m_browser->data(i));
		}
	}

	extern WilImagePackage *g_wilPackage;
	return g_wilPackage->imageCount();
}} {}
  }
  Function {ActivateAll()} {return_type void
  } {
    code {{
        m_window->activate();
        m_menuBar->activate();
        m_browser->activate();
}} {}
  }
  Function {DeactivateAll()} {} {
    code {{
        m_window->deactivate();
        m_menuBar->deactivate();
        m_browser->deactivate();
}} {}
  }
  Function {AddBottomLog(const char *szMessage)} {return_type void
  } {
    code {{
        if(true
                && szMessage
                && std::strlen(szMessage)){
            m_logBar->copy_label(szMessage);
        }else{
            m_logBar->copy_label("Version: 0.0.1");
        }
        m_logBar->redraw();
        m_window->redraw();
}} {}
  }
  Function {autoAlphaEnabled()} {return_type bool
  } {
    code {{
    return m_menuItemAutoAlpha->value();
}} {}
  }
  Function {removeShadowMosaicEnabled()} {return_type bool
  } {
    code {{
    return m_menuItemAutoAlphaShadow->value();
}} {}
  }
  Function {showOffsetCrossEnabled()} {return_type bool
  } {
    code {{
    return m_menuItemShowOffsetCross->value();
}} {}
  }
  Function {saveOffsetEnabled()} {return_type bool
  } {
    code {{
    return m_menuItemSaveOffset->value();
}} {}
  }
  Function {saveIndexEnabled()} {return_type bool
  } {
    code {{
    return m_menuItemSaveIndex->value();
}} {}
  }
  Function {offsetDrawEnabled()} {return_type bool
  } {
    code {{
    return m_menuItemOffsetDraw->value();
}} {}
  }
  Function {clearBackgroundEnabled()} {return_type bool
  } {
    code {{
    return m_menuItemClearBackground->value();
}} {}
  }
  Function {getImageIndexString(int d)} {return_type {std::string}
  } {
    code {{
    if(saveIndexEnabled()){
        return str_printf("%06d_%08X", d, d);
    }
    else{
        return str_printf("%08X", d);
    }
}} {}
  }
  Function {layerIndexEnabled(int index)} {return_type bool
  } {
    code {{
    if(index == 0){
        return m_menuItemShowLayer0->value();
    }
    else if(index == 1){
        return m_menuItemShowLayer1->value();
    }
    else if(index == 2){
        return m_menuItemShowLayer2->value();
    }
    else{
        return false;
    }
}} {}
  }
  Function {saveLayersEnabled()} {return_type bool
  } {
    code {{
    return m_menuItemSaveLayers->value();
}} {}
  }
  Function {saveImage(uint32_t imageIndex, const std::string &filePath)} {return_type void
  } {
    code {{
    extern WilImagePackage *g_wilPackage;
    if(g_wilPackage->setIndex(imageIndex)){
        const auto nW  = g_wilPackage->currImageInfo()->width;
        const auto nH  = g_wilPackage->currImageInfo()->height;
        const auto nDX = g_wilPackage->currImageInfo()->px;
        const auto nDY = g_wilPackage->currImageInfo()->py;

        char tmpIndex[128];
        if(saveOffsetEnabled()){
            std::sprintf(tmpIndex, "TMP%s_%s%s%04X%04X",
                    getImageIndexString(imageIndex).c_str(),
                    ((nDX > 0) ? "1" : "0"),              // sign, postive for 1
                    ((nDY > 0) ? "1" : "0"),              // sign
                    (unsigned int)(std::labs(nDX)),
                    (unsigned int)(std::labs(nDY)));
        }
        else{
            std::sprintf(tmpIndex, "TMP%s", getImageIndexString(imageIndex).c_str());
        }

        if(const auto [layer0, layer1, layer2] = g_wilPackage->decode(true, removeShadowMosaicEnabled(), autoAlphaEnabled()); layer0){
            imgf::saveImageBuffer((const uint8_t *)(layer0), nW, nH, (filePath + "/" + tmpIndex + "_M.PNG").c_str());
        }

        if(saveLayersEnabled()){
            const auto [layer0, layer1, layer2] = g_wilPackage->decode(false, removeShadowMosaicEnabled(), autoAlphaEnabled());
            if(layer0){
                imgf::saveImageBuffer((const uint8_t *)(layer0), nW, nH, (filePath + "/" + tmpIndex + "_0.PNG").c_str());
            }

            if(layer1){
                imgf::saveImageBuffer((const uint8_t *)(layer1), nW, nH, (filePath + "/" + tmpIndex + "_1.PNG").c_str());
            }

            if(layer2){
                imgf::saveImageBuffer((const uint8_t *)(layer2), nW, nH, (filePath + "/" + tmpIndex + "_2.PNG").c_str());
            }
        }
    }
}} {}
  }
}
