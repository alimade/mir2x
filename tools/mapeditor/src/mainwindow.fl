# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.hpp}
code_name {.cpp}
decl {\#include <map>} {private local
}

decl {\#include <array>} {private local
}

decl {\#include <string>} {private local
}

decl {\#include <ctime>} {private local
}

decl {\#include <vector>} {public local
}

decl {\#include <cstdint>} {private local
}

decl {\#include <optional>} {private local
}

decl {\#include <cstring>} {private local
}

decl {\#include <FL/fl_draw.H>} {public local
}

decl {\#include "datef.hpp"} {public local
}

decl {\#include <FL/Fl_Shared_Image.H>} {public local
}

decl {\#include "filesys.hpp"} {private local
}

decl {\#include "strf.hpp"} {private local
}

decl {\#include "totype.hpp"} {private local
}

decl {\#include "imgf.hpp"} {private local
}

decl {\#include "imagemapdb.hpp"} {private local
}

decl {\#include "drawarea.hpp"} {public global
}

decl {\#include "mathf.hpp"} {private local
}

decl {\#include "hexstr.hpp"} {private local
}

decl {\#include "editormap.hpp"} {private local
}

decl {\#include "imagecache.hpp"} {private local
}

decl {\#include <FL/Fl_Native_File_Chooser.H>} {public local
}

class MainWindow {} {
  decl {std::string m_wilFilePathName} {private local
  }
  Function {MainWindow()} {} {
    Fl_Window m_window {
      label {mapeditor-version-0.0.1}
      callback {{
	switch(fl_choice("Quit map editor?", nullptr, " No", " Yes ")){
		case 2  : exit(0); break;
		default :          break;
	}
}}
      xywh {55 121 985 690} type Double labelfont 4 resizable visible
    } {
      Fl_Box m_drawArea {
        xywh {0 20 965 627} labelfont 4 resizable
        class DrawArea
      }
      Fl_Menu_Bar m_menuBar {
        xywh {0 0 993 20} box THIN_UP_BOX labelfont 4 textfont 4
      } {
        Submenu {} {
          label Project
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem {} {
            label New
            callback {SetWorkingPathName();
fl_alert("%s", "Haven't implement yet!");}
            xywh {0 0 30 20} labelfont 4 divider
          }
          MenuItem {} {
            label {Load Layer}
            callback {{
    extern std::string g_wilFilePathName;
    if(g_wilFilePathName == ""){
        SetWilFilePathName();
    }

    if(g_wilFilePathName != ""){
        LoadMir2Map();
    }
}}
            xywh {10 10 30 20} labelfont 4
            code0 {\#include <string>}
            code1 {\#include <FL/Fl_Native_File_Chooser.H>}
            code2 {\#include <FL/fl_ask.H>}
            code3 {\#include <algorithm>}
          }
          MenuItem {} {
            label {Load Mir2Map}
            callback {{
    // maybe default or setted one, depends
    MakeWorkingFolder();

    extern std::string g_wilFilePathName;
    if(g_wilFilePathName == ""){
        SetWilFilePathName();
    }

    if(g_wilFilePathName != ""){
        LoadMir2Map();
    }
}}
            xywh {0 0 30 20} labelfont 4
            code0 {\#include <string>}
            code1 {\#include <FL/Fl_Native_File_Chooser.H>}
            code2 {\#include <FL/fl_ask.H>}
            code3 {\#include <algorithm>}
          }
          MenuItem {} {
            label {Load Mir2xMapData}
            callback {{
    extern std::string g_wilFilePathName;
    if(g_wilFilePathName == ""){
        SetWilFilePathName();
    }

    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Set Map File Path...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                extern std::string g_workingPathName;
                g_workingPathName = "";
                MakeWorkingFolder();

                std::string szPath = stFileChooser.filename();
                std::replace(szPath.begin(), szPath.end(), '\\\\', '/');

                if(szPath.back() == '/'){
                    szPath += "DESC.BIN";
                }else{
                    szPath += "/DESC.BIN";
                }

                if(filesys::hasFile(szPath.c_str())){
                    extern EditorMap g_editorMap;
                    if(!g_editorMap.loadMir2xMapData(szPath.c_str()) || !g_editorMap.valid()){
                        fl_alert("Failed to load Mir2xMapData: %s", szPath.c_str());
                    }

                    setFootLog(str_printf("Mir2xMapData %s, width %zu, height %zu", szPath.c_str(), to_uz(g_editorMap.w()), to_uz(g_editorMap.h())).c_str());
                    AfterLoadMap();
                    Fl::remove_timeout(updateFrame);
                    Fl::add_timeout(0.1, updateFrame, this);

                }else{
                    fl_alert("Invalid Mir2xMapData folder: %s", szPath.c_str());
                }
            }
    }
}}
            xywh {10 10 30 20} shortcut 0x4006f labelfont 4 divider
            code0 {\#include <string>}
            code1 {\#include "editormap.hpp"}
          }
          MenuItem {} {
            label {Save Mir2xMapData}
            callback {{
    SaveMir2xMapData();
}}
            xywh {10 10 30 20} labelfont 4 divider
          }
          MenuItem {} {
            label {Export Overview 1:1}
            callback {{
    extractOverview(1);
}}
            xywh {20 20 30 20} labelfont 4
          }
          MenuItem {} {
            label {Export Overview 1:2}
            callback {{
    extractOverview(2);
}}
            xywh {30 30 30 20} labelfont 4
          }
          MenuItem {} {
            label {Export Overview 1:4}
            callback {{
    extractOverview(4);
}}
            xywh {40 40 30 20} labelfont 4
          }
          MenuItem {} {
            label {Export Overview 1:8}
            callback {{
    extractOverview(8);
}}
            xywh {50 50 30 20} labelfont 4
          }
          MenuItem {} {
            label {Export Overview 1:16}
            callback {{
    extractOverview(16);
}}
            xywh {60 60 30 20} labelfont 4
          }
          MenuItem {} {
            label {Export Overview 1:32}
            callback {{
    extractOverview(32);
}}
            xywh {70 70 30 20} labelfont 4 divider
          }
          MenuItem {} {
            label {Save As}
            callback {{
	// automatically generate another working folder
	// and setting current working folder to it
}}
            xywh {0 0 30 20} shortcut 0x50073 labelfont 4 divider
          }
          MenuItem {} {
            label Quit
            callback {exit(0);}
            xywh {0 0 30 20} shortcut 0x40071 labelfont 4
          }
        }
        Submenu {} {
          label Grid
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem m_menuItemGridLine {
            label {Step                  }
            xywh {30 30 30 20} type Toggle labelfont 4
          }
          MenuItem m_menuItemAttributeGridLine {
            label Attribute
            callback {{
	extern AttributeSelectWindow *g_attributeGridWindow;
	if(m_menuItemAttributeGridLine->value()){
		g_attributeGridWindow->showAll();
	}
}}
            xywh {30 30 30 20} type Toggle labelfont 4 divider
          }
          MenuItem m_menuItemLightLine {
            label Light
            xywh {0 0 30 20} type Toggle labelfont 4 divider
          }
          MenuItem m_menuItemBaseTileLine {
            label Tile
            xywh {10 10 30 20} type Toggle labelfont 4 divider
          }
          MenuItem m_menuItemObjectGroundLine {
            label {Object Ground}
            xywh {10 10 30 20} type Toggle labelfont 4
          }
          MenuItem m_menuItemObjectOverGround0Line {
            label {Object Over Ground 0}
            xywh {20 20 30 20} type Toggle labelfont 4
          }
          MenuItem m_menuItemObjectOverGround1Line {
            label {Object Over Ground 1}
            xywh {30 30 30 20} type Toggle labelfont 4
          }
          MenuItem m_menuItemObjectSkyLine {
            label {Object Sky}
            xywh {40 40 30 20} type Toggle labelfont 4 divider
          }
          MenuItem m_menuItemObjectIndex0Line {
            label {Object Index 0}
            xywh {50 50 30 20} type Toggle labelfont 4
          }
          MenuItem m_menuItemObjectIndex1Line {
            label {Object Index 1}
            xywh {60 60 30 20} type Toggle labelfont 4
          }
        }
        Submenu {} {
          label Show
          xywh {10 10 62 20} labelfont 4
        } {
          MenuItem m_menuItemShowLight {
            label Light
            xywh {10 10 30 20} type Toggle value 1 labelfont 4 divider
          }
          MenuItem m_menuItemShowTile {
            label Tile
            xywh {20 20 30 20} type Toggle value 1 labelfont 4 divider
          }
          MenuItem m_menuItemShowObjectGround {
            label {Object Ground}
            xywh {20 20 30 20} type Toggle labelfont 4
          }
          MenuItem m_menuItemShowObjectOverGround0 {
            label {Object Over Ground 0}
            xywh {30 30 30 20} type Toggle labelfont 4
          }
          MenuItem m_menuItemShowObjectOverGround1 {
            label {Object Over Ground 1}
            xywh {40 40 30 20} type Toggle labelfont 4
          }
          MenuItem m_menuItemShowObjectSky {
            label {Object Sky}
            xywh {50 50 30 20} type Toggle labelfont 4 divider
          }
          MenuItem m_menuItemShowObjectIndex0 {
            label {Object Index 0}
            xywh {60 60 30 20} type Toggle value 1 labelfont 4
          }
          MenuItem m_menuItemShowObjectIndex1 {
            label {Object Index 1}
            xywh {70 70 30 20} type Toggle value 1 labelfont 4 divider
          }
          MenuItem m_menuItemRemoveShadowMosaic {
            label {Remove Shadow Mosaic}
            callback {extern ImageCache g_imageCache;
g_imageCache.clear();}
            xywh {40 40 30 20} type Toggle value 1 labelfont 4 divider
            code0 {\#include "imagecache.hpp"}
          }
          MenuItem m_menuItemClearBackground {
            label {Clear Background         }
            xywh {50 50 30 20} type Toggle value 1 labelfont 4
          }
        }
        Submenu {} {
          label Edit
          xywh {20 20 62 20} labelfont 4
        } {
          MenuItem m_menuItemEnableEdit {
            label {Enable Edit                    }
            xywh {20 20 30 20} type Toggle labelfont 4
          }
          MenuItem m_menuItemEditGround {
            label {Edit Ground Info}
            xywh {30 30 30 20} type Toggle labelfont 4 divider
          }
          MenuItem {} {
            label Optimize
            callback {{
    extern EditorMap g_editorMap;
        if(g_editorMap.valid()){
        g_editorMap.optimize();
    }
}}
            xywh {40 40 30 20} labelfont 4
            code0 {\#include "editormap.hpp"}
          }
        }
        Submenu {} {
          label Select
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem m_menuItemEnableSelect {
            label {Enable Select            }
            callback {setSelectMenuItemList(m_menuItemEnableSelect->value());}
            xywh {30 30 30 20} type Toggle labelfont 4 divider
          }
          MenuItem m_menuItemSelectByAttribute {
            label Attribute
            callback {{
	extern AttributeSelectWindow *g_attributeSelectWindow;
	if(m_menuItemSelectByAttribute->value()){
		g_attributeSelectWindow->showAll();
	}
}}
            xywh {30 30 30 20} type Radio labelfont 4
            code0 {\#include "attributeselectwindow.hpp"}
          }
          MenuItem m_menuItemSelectByTile {
            label Tile
            xywh {40 40 30 20} type Radio value 1 labelfont 4
          }
          MenuItem m_menuItemSelectByObjectGround {
            label {Object Ground}
            xywh {50 50 30 20} type Radio labelfont 4
          }
          MenuItem m_menuItemSelectByObjectOverGround0 {
            label {Object Over Ground 0}
            xywh {60 60 30 20} type Radio labelfont 4
          }
          MenuItem m_menuItemSelectByObjectOverGround1 {
            label {Object Over Ground 1}
            xywh {70 70 30 20} type Radio labelfont 4
          }
          MenuItem m_menuItemSelectByObjectSky {
            label {Object Sky}
            xywh {80 80 30 20} type Radio labelfont 4
          }
          MenuItem m_menuItemSelectByObjectIndex0 {
            label {Object Index 0}
            xywh {90 90 30 20} type Radio labelfont 4
          }
          MenuItem m_menuItemSelectByObjectIndex1 {
            label {Object Index 1}
            xywh {100 100 30 20} type Radio labelfont 4 divider
          }
          MenuItem m_menuItemReversed {
            label Reversed
            xywh {10 10 30 20} type Toggle labelfont 4
          }
          MenuItem m_menuItemDeselect {
            label Deselect
            xywh {20 20 30 20} type Toggle labelfont 4 divider
          }
          MenuItem {} {
            label {Clear All Select}
            callback {extern EditorMap g_editorMap;
g_editorMap.clearSelect();}
            xywh {30 30 30 20} labelfont 4
            code0 {\#include "editormap.hpp"}
          }
        }
        Submenu {} {
          label Layer
          xywh {0 0 70 20} labelfont 4
        } {
          MenuItem {} {
            label {Import Layer           }
            xywh {40 40 30 20} labelfont 4 divider
          }
          MenuItem {} {
            label {Export Layer}
            callback {extern EditorMap g_editorMap;
extern LayerBrowserWindow *g_layerBrowserWindow;
g_layerBrowserWindow->addEntry(g_editorMap.exportLayer());
g_layerBrowserWindow->showAll();}
            xywh {50 50 30 20} labelfont 4 divider
            code0 {\#include "editormap.hpp"}
            code1 {\#include "layerbrowserwindow.hpp"}
          }
          MenuItem {} {
            label Reject
            xywh {50 50 30 20} type Radio value 1 labelfont 4
            code0 {\#include "layerbrowserwindow.hpp"}
          }
          MenuItem {} {
            label Replace
            xywh {60 60 30 20} type Radio labelfont 4
            code0 {\#include "layerbrowserwindow.hpp"}
          }
          MenuItem {} {
            label Substitute
            xywh {70 70 30 20} type Radio labelfont 4 divider
            code0 {\#include "layerbrowserwindow.hpp"}
          }
          MenuItem {} {
            label {Layer Browser}
            callback {extern LayerBrowserWindow *g_layerBrowserWindow;
g_layerBrowserWindow->showAll();}
            xywh {30 30 30 20} labelfont 4
            code0 {\#include "layerbrowserwindow.hpp"}
          }
        }
        Submenu {} {
          label Test
          xywh {0 0 70 20}
        } {
          MenuItem m_menuItemEnableTest {
            label {Enable Test     }
            xywh {0 0 34 20} type Toggle labelfont 4 divider
          }
          MenuItem m_menuItemTestAnimation0 {
            label {Animation 0}
            xywh {0 0 34 20} type Radio value 1 labelfont 4
          }
          MenuItem m_menuItemTestAnimation1 {
            label {Animation 1}
            xywh {20 20 34 20} type Radio labelfont 4
          }
          MenuItem m_menuItemTestAnimation2 {
            label {Animation 2}
            xywh {10 10 34 20} type Radio labelfont 4
          }
        }
        Submenu {} {
          label About
          xywh {30 30 62 20} labelfont 4
        } {
          MenuItem {} {
            label {About Me               }
            callback {extern AboutWindow *g_aboutWindow;
g_aboutWindow->showAll();}
            xywh {30 30 30 20} labelfont 4
            code0 {\#include "aboutwindow.hpp"}
          }
        }
      }
      Fl_Scrollbar m_vsbar {
        callback {m_window->redraw();}
        xywh {965 20 20 647} labeltype NO_LABEL labelfont 4 step 0.001 deactivate
      }
      Fl_Scrollbar m_hsbar {
        callback {m_window->redraw();}
        xywh {0 647 965 20} type Horizontal labeltype NO_LABEL labelfont 4 step 0.001 deactivate
      }
      Fl_Box m_logBar {
        label label
        private xywh {0 667 985 25} box THIN_UP_BOX labelfont 4 align 20
      }
    }
    code {{
    // set slider size
    // current the fluid can set the slider_size
    // but when parsing it, it complains ``unknown property: slider_size"

    setSelectMenuItemList(false);
    setScrollBarSize(1.0, 1.0);
    setFootLog("no map loaded");
}} {}
  }
  Function {showAll()} {return_type void
  } {
    code {{
	m_window->show();
}} {}
  }
  Function {redrawAll()} {return_type void
  } {
    code {{
	m_window->redraw();
}} {}
  }
  Function {LoadMir2MapImage()} {return_type void
  } {
    code {{
    extern std::string g_wilFilePathName;
    extern ImageMapDB    *g_imageMapDB;
    if(!g_imageMapDB){
        g_imageMapDB = new ImageMapDB(g_wilFilePathName.c_str());
    }
}} {}
  }
  Function {LoadMir2Map()} {return_type void
  } {
    code {{
    extern EditorMap g_editorMap;

    Fl_Native_File_Chooser fileChooser;
    fileChooser.title("Select .map file");
    fileChooser.type(Fl_Native_File_Chooser::BROWSE_FILE);

    char matchedFileNames[] =
        "MAP\\t*.map\\n"
        ;

    fileChooser.filter(matchedFileNames);
    fileChooser.directory(".");
    switch(fileChooser.show()){
        case -1:
            fl_alert("%s", fileChooser.errmsg());
            break;
        case  1:
            break;
        default:
            {
                if(!g_editorMap.loadMir2Map(fileChooser.filename())){
                    fl_alert("Load mir2 map %s failed", fileChooser.filename());
                }

                setFootLog(str_printf("Mir2Map %s, width %zu, height %zu", fileChooser.filename(), to_zu(g_editorMap.w()), to_zu(g_editorMap.h())).c_str());
                AfterLoadMap();

                Fl::remove_timeout(updateFrame);
                Fl::add_timeout(0.1, updateFrame, this);
            }
            break;
    }
    m_drawArea->redraw();
}} {}
  }
  Function {AfterLoadMap()} {return_type void
  } {
    code {{
    // check if we need to deactivate the scroll bars
    // 1. used after load map
    // 2. used after draw area resize
    checkScrollBar();
    setScrollBarValue(0.0, 0.0);
    redrawAll();
}} {}
  }
  Function {SetWorkingPathName()} {return_type void
  } {
    code {{
    // set the work folder
    // default CACHE system locates inside
    extern std::string g_workingPathName;
    Fl_Native_File_Chooser stFileChooser;

    stFileChooser.title("Set Working Folder...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                g_workingPathName = stFileChooser.filename();
                std::replace(g_workingPathName.begin(), g_workingPathName.end(), '\\\\', '/');
                while(!g_workingPathName.empty() && g_workingPathName.back() == '/'){
                    g_workingPathName.pop_back();
                }
                MakeWorkingFolder();
            }
            break;
    }
}} {}
  }
  Function {SetWilFilePathName()} {return_type void
  } {
    code {{
    extern std::string g_wilFilePathName;
    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Set *.wil File Path...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                std::string szOldWilFilePathName = g_wilFilePathName;
                g_wilFilePathName = stFileChooser.filename();
                std::replace(g_wilFilePathName.begin(), g_wilFilePathName.end(), '\\\\', '/');
                if(szOldWilFilePathName != g_wilFilePathName){
                    LoadMir2MapImage();
                    break;
                }
            }
    }
}} {}
  }
  Function {updateFrame(void *window)} {return_type {static void}
  } {
    code {{
    ((MainWindow *)(window))->update(100);
    Fl::repeat_timeout(0.1, updateFrame, window);
}} {}
  }
  Function {enableShowTileLine()} {return_type bool
  } {
    code {{
	return m_menuItemBaseTileLine->value();
}} {}
  }
  Function {enableShowObjectLine(int depth)} {return_type bool
  } {
    code {{
    switch(depth){
        case OBJD_GROUND     : return m_menuItemObjectGroundLine->value();
        case OBJD_OVERGROUND0: return m_menuItemObjectOverGround0Line->value();
        case OBJD_OVERGROUND1: return m_menuItemObjectOverGround1Line->value();
        case OBJD_SKY        : return m_menuItemObjectSkyLine->value();
        default              : return false;
    }
}} {}
  }
  Function {enableShowObjectIndexLine(int objIndex)} {return_type bool
  } {
    code {{
    if(objIndex == 0){
        return m_menuItemObjectIndex0Line->value();
    }
    else{
        return m_menuItemObjectIndex1Line->value();
    }
}} {}
  }
  Function {enableShowLightLine()} {return_type bool
  } {
    code {{
	return m_menuItemLightLine->value();
}} {}
  }
  Function {enableShowGridLine()} {return_type bool
  } {
    code {{
	return m_menuItemGridLine->value();
}} {}
  }
  Function {enableShowAttributeGridLine()} {return_type bool
  } {
    code {{
	return m_menuItemAttributeGridLine->value();
}} {}
  }
  Function {enableShowLight()} {return_type bool
  } {
    code {{
	return m_menuItemShowLight->value();
}} {}
  }
  Function {enableShowTile()} {return_type bool
  } {
    code {{
	return m_menuItemShowTile->value();
}} {}
  }
  Function {enableShowObject(int depth)} {return_type bool
  } {
    code {{
    switch(depth){
        case OBJD_GROUND     : return m_menuItemShowObjectGround->value();
        case OBJD_OVERGROUND0: return m_menuItemShowObjectOverGround0->value();
        case OBJD_OVERGROUND1: return m_menuItemShowObjectOverGround1->value();
        case OBJD_SKY        : return m_menuItemShowObjectSky->value();
        default              : return false;
    }
}} {}
  }
  Function {enableShowObjectIndex(int objIndex)} {return_type bool
  } {
    code {{
    if(objIndex == 0){
        return m_menuItemShowObjectIndex0->value();
    }
    else{
        return m_menuItemShowObjectIndex1->value();
    }
}} {}
  }
  Function {EnableEdit()} {return_type bool
  } {
    code {{
	return m_menuItemEnableEdit->value();
}} {}
  }
  Function {enableSelect()} {return_type bool
  } {
    code {{
	return m_menuItemEnableSelect->value();
}} {}
  }
  Function {enableTest()} {return_type bool
  } {
    code {{
    return m_menuItemEnableTest->value();
}} {}
  }
  Function {enableSelectByAttribute()} {return_type bool
  } {
    code {{
	return m_menuItemEnableSelect->value() && m_menuItemSelectByAttribute->value();
}} {}
  }
  Function {enableSelectByTile()} {return_type bool
  } {
    code {{
	return m_menuItemEnableSelect->value() && m_menuItemSelectByTile->value();
}} {}
  }
  Function {enableSelectByObject(int depth)} {return_type bool
  } {
    code {{
    if(!m_menuItemEnableSelect->value()){
        return false;
    }

    switch(depth){
        case OBJD_GROUND     : return m_menuItemSelectByObjectGround->value();
        case OBJD_OVERGROUND0: return m_menuItemSelectByObjectOverGround0->value();
        case OBJD_OVERGROUND1: return m_menuItemSelectByObjectOverGround1->value();
        case OBJD_SKY        : return m_menuItemSelectByObjectSky->value();
        default              : return false;
    }
}} {}
  }
  Function {enableSelectByObjectIndex(int objIndex)} {return_type bool
  } {
    code {{
    if(!m_menuItemEnableSelect->value()){
        return false;
    }

    if(objIndex == 0){
        return m_menuItemSelectByObjectIndex0->value();
    }
    else{
        return m_menuItemSelectByObjectIndex1->value();
    }
}} {}
  }
  Function {MakeWorkingFolder()} {return_type void
  } {
    code {{
    extern std::string g_workingPathName;
    if(g_workingPathName == "" || (g_workingPathName.size() > 0 && g_workingPathName[0] == '.')){
        g_workingPathName = std::string("./") + datef::now();
    }

    filesys::removeDir(g_workingPathName.c_str());
    filesys::makeDir(g_workingPathName.c_str());
}} {}
  }
  Function {SaveMir2xMapData()} {return_type void
  } {
    code {{
	extern EditorMap g_editorMap;
	if(g_editorMap.valid()){
		extern std::string g_workingPathName;
    		std::string szTmpFileName = g_workingPathName;
	
		if(szTmpFileName.back() == '/'){
        		szTmpFileName += "DESC.BIN";
    		}else{
        		szTmpFileName += "/DESC.BIN";
    		}
    		g_editorMap.saveMir2xMapData(szTmpFileName.c_str());
    		fl_message("Save map file in mir2xmapdata format successfully!");
    		
	}else{
		fl_alert("%s", "Currently no operating map!");
	}
}} {}
  }
  Function {clearBackground()} {return_type bool
  } {
    code {{
    return m_menuItemClearBackground->value();
}} {}
  }
  Function {deselect()} {return_type bool
  } {
    code {{
    return m_menuItemDeselect->value();
}} {}
  }
  Function {reversed()} {return_type bool
  } {
    code {{
    return m_menuItemReversed->value();
}} {}
  }
  Function {checkScrollBar()} {return_type void
  } {
    code {{
    // check if we need to deactivate the scroll bars, but don't reset the scrollbar value
    // 1. used after load map
    // 2. used after draw area resize
    const auto [roiW, roiH] = m_drawArea->getROISize().value_or(std::make_tuple(0, 0));
    if(to_d(roiW) <= m_drawArea->w()){
        m_hsbar->deactivate();
        setScrollBarValue(0.0, {});
        setScrollBarSize (1.0, {});
    }
    else{
        m_hsbar->activate();
        ((Fl_Valuator *)(m_hsbar))->step(1, roiW);
        setScrollBarSize(to_f(m_drawArea->w()) / roiW, {});
    }

    if(to_d(roiH) <= m_drawArea->h()){
        m_vsbar->deactivate();
        setScrollBarValue({}, 0.0);
        setScrollBarSize ({}, 1.0);
    }
    else{
        m_vsbar->activate();
        ((Fl_Valuator *)(m_vsbar))->step(1, roiH);
        setScrollBarSize({}, to_f(m_drawArea->h()) / roiH);
    }
}} {}
  }
  Function {Activate()} {return_type void
  } {
    code {{
    m_hsbar->activate();
    m_vsbar->activate();
    m_menuBar->activate();
}} {}
  }
  Function {Deactivate()} {return_type void
  } {
    code {{
    m_hsbar->deactivate();
    m_vsbar->deactivate();
    m_menuBar->deactivate();
}} {}
  }
  Function {extractOverview(int overviewRatio)} {return_type void
  } {
    code {{
    // create a big png file as an overview of the current map
    // generate name and save it in current working folder, support ratio 1/2/4/8/16/32

    extern EditorMap g_editorMap;
    if(!g_editorMap.valid()){
        fl_alert("Current editor map is invalid");
        return;
    }

    extern std::string g_workingPathName;
    if(g_workingPathName.empty()){
        fl_alert("Current editor working path is invalid");
        return;
    }

    if(overviewRatio <= 0){
        fl_alert("Invalid overview ratio: %d", overviewRatio);
        return;
    }

    const int dstW = g_editorMap.w() * SYS_MAPGRIDXP;
    const int dstH = g_editorMap.h() * SYS_MAPGRIDYP;

    if(dstW % overviewRatio || dstH % overviewRatio){
        fl_alert("Overview ratio doesn't match map size: ratio = %d, w = %zu h = %zu", overviewRatio, g_editorMap.w(), g_editorMap.h());
        return;
    }

    std::vector<uint32_t> origDstBuf(dstW * dstH, 0);
    auto dstPtr = origDstBuf.data();

    const auto fnBufDrawImage = [this, dstPtr, dstW, dstH](uint32_t imageIndex, int nX, int nY, bool isObj)
    {
        extern ImageMapDB *g_imageMapDB;
        extern EditorMap g_editorMap;

        if(g_editorMap.validC(nX, nY) && g_imageMapDB->setIndex(imageIndex)){
            if(const auto [srcPtr, srcW, srcH] = g_imageMapDB->decode(imageIndex, true); srcPtr){
                imgf::blendImageBuffer(
                        dstPtr, dstW, dstH,
                        srcPtr, srcW, srcH,

                        nX * SYS_MAPGRIDXP,
                        nY * SYS_MAPGRIDYP + (isObj ? (SYS_MAPGRIDYP - srcH) : 0));
            }
        }
    };

    g_editorMap.exportOverview(fnBufDrawImage, nullptr);
    const std::string szOverviewFileName = datef::now() + ".PNG";
    const std::string szOverviewFullFileName = g_workingPathName + "/" + szOverviewFileName;

    int exportW = dstW;
    int exportH = dstH;
    const uint32_t *exportBufPtr = dstPtr;

    std::vector<uint32_t> overviewDstBuf;
    if(overviewRatio != 1){
        const int overviewW = dstW / overviewRatio;
        const int overviewH = dstH / overviewRatio;

        overviewDstBuf.resize(overviewW * overviewH, 0);
        for(int y = 0; y < overviewH; ++y){
            for(int x = 0; x < overviewW; ++x){
                const int origX = x * overviewRatio;
                const int origY = y * overviewRatio;
                overviewDstBuf[y * overviewW + x] = origDstBuf[origY * dstW + origX];
            }
        }

        exportW = overviewW;
        exportH = overviewH;
        exportBufPtr = overviewDstBuf.data();
    }

    if(imgf::saveImageBuffer((const uint8_t *)(exportBufPtr), to_u32(exportW), to_u32(exportH), szOverviewFullFileName.c_str())){
        fl_alert("Done overview map image: %s", szOverviewFileName.c_str());
    }
    else{
        fl_alert("Export overview map image failed");
    }
}} {}
  }
  Function {update(uint32_t loopTime)} {return_type void
  } {
    code {{
    m_drawArea->update(loopTime);
    m_window->redraw();
}} {}
  }
  Function {setFootLog(const char *msg)} {return_type void
  } {
    code {{
    if(str_haschar(msg)){
        m_logBar->copy_label(str_printf("[STATUS]: %s", msg).c_str());
    }
    else{
        m_logBar->copy_label("[STATUS]");
    }

    m_logBar->redraw();
    m_window->redraw();
}} {}
  }
  Function {setScrollBarSize(std::optional<float> xsize, std::optional<float> ysize)} {return_type void
  } {
    code {{
    if(xsize.has_value()){
        ((Fl_Slider *)(m_hsbar))->slider_size(std::max<float>(std::min<float>(xsize.value(), 1.0), 0.0));
    }

    if(ysize.has_value()){
        ((Fl_Slider *)(m_vsbar))->slider_size(std::max<float>(std::min<float>(ysize.value(), 1.0), 0.0));
    }
}} {}
  }
  Function {getScrollBarValue()} {return_type {std::tuple<float, float>}
  } {
    code {{
    return
    {
        ((Fl_Valuator *)(m_hsbar))->value(),
        ((Fl_Valuator *)(m_vsbar))->value(),
    };
}} {}
  }
  Function {addScrollBarValue(float xratio, float yratio)} {return_type void
  } {
    code {{
    const auto [xval, yval] = getScrollBarValue();
    setScrollBarValue(xval + xratio, yval + yratio);
}} {}
  }
  Function {setScrollBarValue(std::optional<float> xratio, std::optional<float> yratio)} {return_type void
  } {
    code {{
    if(xratio.has_value()){
        ((Fl_Valuator *)(m_hsbar))->value(std::max<float>(std::min<float>(xratio.value(), 1.0), 0.0));
    }

    if(yratio.has_value()){
        ((Fl_Valuator *)(m_vsbar))->value(std::max<float>(std::min<float>(yratio.value(), 1.0), 0.0));
    }
}} {}
  }
  Function {setSelectMenuItemList(bool enable)} {return_type void
  } {
    code {{
    if(enable){
        m_menuItemSelectByAttribute->activate();
        m_menuItemSelectByTile->activate();
        m_menuItemSelectByObjectGround->activate();
        m_menuItemSelectByObjectOverGround0->activate();
        m_menuItemSelectByObjectOverGround1->activate();
        m_menuItemSelectByObjectSky->activate();
        m_menuItemSelectByObjectIndex0->activate();
        m_menuItemSelectByObjectIndex1->activate();
    }
    else{
        m_menuItemSelectByAttribute->deactivate();
        m_menuItemSelectByTile->deactivate();
        m_menuItemSelectByObjectGround->deactivate();
        m_menuItemSelectByObjectOverGround0->deactivate();
        m_menuItemSelectByObjectOverGround1->deactivate();
        m_menuItemSelectByObjectSky->deactivate();
        m_menuItemSelectByObjectIndex0->deactivate();
        m_menuItemSelectByObjectIndex1->deactivate();
    }
}} {}
  }
  Function {removeShadowMosaicEnabled()} {return_type bool
  } {
    code {return m_menuItemRemoveShadowMosaic->value();} {}
  }
  Function {getAnimationIndex()} {return_type int
  } {
    code {{
    if(m_menuItemEnableTest->value()){
        if(m_menuItemTestAnimation0->value()){
            return 0;
        }
        else if(m_menuItemTestAnimation1->value()){
            return 1;
        }
        else if(m_menuItemTestAnimation2->value()){
            return 2;
        }
    }
    return -1;
}} {}
  }
}
